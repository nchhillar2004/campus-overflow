datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String   @unique
  email         String   @unique
  password      String
  address       Address?
  role          Role     @default(USER)
  plan          Plan     @default(FREE)
  isAdmin       Boolean  @default(false)
  isVerified    Boolean  @default(false)
  isBan         Boolean  @default(false)
  isTimeout     Boolean  @default(false)
  emailVerified Boolean  @default(false)
  image         String
  starts        Int      @default(0)

  mails     Mails[]
  posts     Posts[]
  comments  Comments[]
  questions Questions[]
  answers   Answers[]
  tags      Tags[]

  time      String
  createdAt DateTime @default(now())
}

model Posts {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  userId    String     @db.ObjectId
  users     Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Int        @default(0)
  comments  Comments[]
  tagIDs    String     @db.ObjectId
  tags      Tags       @relation(fields: [tagIDs], references: [id])
  time      String
  createdAt DateTime   @default(now())
  
  @@index([userId])
}

model Mails {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  isVerify  Boolean  @default(false)
  isContact Boolean  @default(false)
  isGranted Boolean  @default(false)
  userId    String   @db.ObjectId
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  time      String
  createdAt DateTime @default(now())
}


model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  post      Posts    @relation(fields: [postId], references: [id])
  author    Users    @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  postId    String   @db.ObjectId
  time      String
  createdAt DateTime @default(now())
}

model Questions {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  postId    String    @db.ObjectId
  answers   Answers[]
  tagIDs    String  @db.ObjectId
  tags      Tags    @relation(fields: [tagIDs], references: [id])
  time      String
  createdAt DateTime  @default(now())
}

model Answers {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  answer     String
  question   Questions @relation(fields: [questionId], references: [id])
  author     Users     @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  questionId String    @db.ObjectId
  time       String
  createdAt  DateTime  @default(now())
}

model Tags {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  questions  Questions []
  postId     String    @db.ObjectId
  posts      Posts[]
  userId     String    @db.ObjectId
  users      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
}

type Address {
  street  String?
  city    String
  state   String
  zip     String
  country String
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  PRO
}
